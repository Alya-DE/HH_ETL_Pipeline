x-airflow-settings: &airflow-settings
  build:
    context: ./airflow_dockerfile
    dockerfile: Dockerfile
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  env_file:
    - .env
  environment:
    AIRFLOW_CORE_EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE_DAGS_ARE_PAUSED_AT_CREATION: 'true' # для проверки DAG перед запуском, во избежание неожиданных запусков неготовых DAG
    AIRFLOW_CORE_LOAD_EXAMPLES: 'false' # скроем примеры DAG
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5 # установим интервал времени для проверки изменений и пояаления новых DAG в директории DAG
    _AIRFLOW_DB_MIGRATE: 'true' # для выполнения миграции базы данных при загрузке
    _AIRFLOW_WWW_USER_CREATE: 'true' # создадим пользователя по умолчанию для веб-интерфейса Airflow
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-password}
  volumes:
    - ./dags:/opt/airflow/dags # монтируем локальную папку с DAG в контейнер, чтобы Airflow мог получать к ним доступ
    - ./logs:/opt/airflow/logs # монтируем локальную папку для хранения логов выполнения задач
  depends_on:
    postgres:
      condition: service_healthy # установим условие, чтобы Airflow не попытался подключиться к базе данных, пока она еще не готова
  networks:
    - all_in_one # для взаимодействия с другими сервисами внутри единой изолированной сети, подключим сервисы Airflow к сети с общим именем all_in_one
 
services:  # опишем сервисы, которые будем разворачивать с помощью Docker-compose для реализации поставленной задачи
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: postgres
    ports: # настроим перенаправление портов, которое позволит подключиться к сервису Postgres снаружи контейнера
      - "5432:5432"
    restart: always
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./src/init_db:/docker-entrypoint-initdb.d
    healthcheck: # добавим настройку проверки доступности сервера PostgreSQL, чтобы убедиться, что PostgreSQL работает корректно
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    networks:
      - all_in_one
 
  af-webserver:
    <<: *airflow-settings
    container_name: af-webserver
    command: >
      webserver
      --port 8080
      --host 0.0.0.0
    ports:
      - "8080:8080"
    restart: always
 
  af-scheduler:
    <<: *airflow-settings
    container_name: af-scheduler
    command: scheduler
    restart: always
 
  airflow-init:
    <<: *airflow-settings
    container_name: airflow-init
    command: bash -c "airflow db migrate && airflow users create --username ${_AIRFLOW_WWW_USER_USERNAME:-admin} --password ${_AIRFLOW_WWW_USER_PASSWORD:-password} --firstname Admin --lastname User --role Admin --email admin@example.com" # однократная инициализация Airflow
 
  superset-init:
    container_name: superset-init
    build:
      context: ./superset_dockerfile
      dockerfile: Dockerfile
    environment:
      ADMIN_USERNAME: ${SUPERSET_ADMIN_USERNAME}
      ADMIN_EMAIL: ${SUPERSET_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
    networks:
      - all_in_one
    depends_on:
      postgres:
        condition: service_healthy
    command: "/superset-init.sh"
 
  superset:
    build:
      context: ./superset_dockerfile
      dockerfile: Dockerfile
    image: hh_data_engineer-superset
    container_name: superset
    environment:
      SUPERSET_CONFIG_PATH: /app/superset_config.py
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
    volumes:
      - ./superset_data:/app/superset_home
      - ./superset_dockerfile/superset_config.py:/app/superset_config.py
    ports:
      - '8088:8088'
    command: superset run -p 8088 -h 0.0.0.0 --with-threads --reload --debugger
    depends_on:
      - superset-init
      - postgres
    networks:
      - all_in_one
 
volumes:
  postgres-db-volume:
 
networks:
  all_in_one:
 
